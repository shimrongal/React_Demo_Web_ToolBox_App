{"ast":null,"code":"import axios from 'axios';\nimport { useState } from 'react';\nimport ShoppingItemModel from '../models/ShoppingItemModel';\nimport firebase from \"../utils/FirebaseConfig\";\nlet fireStoreDb = firebase.firestore();\nexport const getCityList = setCityNameArr => {\n  axios.get('israel_city_list.json').then(response => {\n    setCityNameArr(response.data.map(item => {\n      return item.hebrew_name;\n    }));\n  });\n};\nexport const getShoppingList = updateShoppingList => {\n  const tempShoppingItems = [];\n  fireStoreDb.collection(\"shopping-list\").get().then(querySnapshot => {\n    querySnapshot.forEach(doc => {\n      tempShoppingItems.push(new ShoppingItemModel(doc.data().itemName, doc.data().itemBrand, doc.data().itemQuantity, doc.data().inCart));\n    });\n    updateShoppingList(tempShoppingItems);\n  }).catch(error => {\n    console.error(\"Error getting document: \", error);\n  });\n};\n/**\n * Will create entry in firestore database with random id ID Scheme : ID = name + brand-name \n * @param {*} shoppingItem \n */\n\nexport const addShoppingItemToFireStore = shoppingItem => {\n  fireStoreDb.collection(\"shopping-list\").doc(shoppingItem.itemName + \"_\" + shoppingItem.itemBrand).set({\n    itemName: shoppingItem.itemName,\n    itemBrand: shoppingItem.itemBrand,\n    itemQuantity: shoppingItem.itemQuantity,\n    inCart: false\n  });\n};\n/**\n * Will create entry in firestore database with random id\n * @param {*} shoppingItem \n */\n\nexport const saveShoppingItem = shoppingItem => {\n  fireStoreDb.collection(\"shopping-list\").add({\n    itemName: shoppingItem.itemName,\n    itemBrand: shoppingItem.itemBrand,\n    itemQuantity: shoppingItem.itemQuantity,\n    inCart: false\n  }).then(docRef => {\n    //TODO: implement\n    console.log(\"Document written with ID: \", docRef.id);\n  }).catch(error => {\n    console.error(\"Error adding document: \", error);\n  });\n};","map":{"version":3,"sources":["/Users/gal/Dev/AppleSeeds/FinalProject/toolbox_app/src/utils/HelperFunctions.js"],"names":["axios","useState","ShoppingItemModel","firebase","fireStoreDb","firestore","getCityList","setCityNameArr","get","then","response","data","map","item","hebrew_name","getShoppingList","updateShoppingList","tempShoppingItems","collection","querySnapshot","forEach","doc","push","itemName","itemBrand","itemQuantity","inCart","catch","error","console","addShoppingItemToFireStore","shoppingItem","set","saveShoppingItem","add","docRef","log","id"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,OAAOC,iBAAP,MAA8B,6BAA9B;AAEA,OAAOC,QAAP,MAAqB,yBAArB;AAEA,IAAIC,WAAW,GAAGD,QAAQ,CAACE,SAAT,EAAlB;AAIA,OAAO,MAAMC,WAAW,GAAGC,cAAD,IAAkB;AACxCP,EAAAA,KAAK,CAACQ,GAAN,CAAU,uBAAV,EAAmCC,IAAnC,CAAwCC,QAAQ,IAAE;AAC9CH,IAAAA,cAAc,CAACG,QAAQ,CAACC,IAAT,CAAcC,GAAd,CAAmBC,IAAD,IAAQ;AACrC,aAAOA,IAAI,CAACC,WAAZ;AACH,KAFc,CAAD,CAAd;AAGH,GAJD;AAKH,CANM;AAQP,OAAO,MAAMC,eAAe,GAAGC,kBAAD,IAAsB;AAChD,QAAMC,iBAAiB,GAAG,EAA1B;AACAb,EAAAA,WAAW,CAACc,UAAZ,CAAuB,eAAvB,EAAwCV,GAAxC,GAA8CC,IAA9C,CACEU,aAAD,IAAiB;AACVA,IAAAA,aAAa,CAACC,OAAd,CAAsBC,GAAG,IAAI;AACzBJ,MAAAA,iBAAiB,CAACK,IAAlB,CAAwB,IAAIpB,iBAAJ,CAAsBmB,GAAG,CAACV,IAAJ,GAAWY,QAAjC,EAA2CF,GAAG,CAACV,IAAJ,GAAWa,SAAtD,EAAkEH,GAAG,CAACV,IAAJ,GAAWc,YAA7E,EAA4FJ,GAAG,CAACV,IAAJ,GAAWe,MAAvG,CAAxB;AACH,KAFD;AAGAV,IAAAA,kBAAkB,CAACC,iBAAD,CAAlB;AACH,GANL,EAMOU,KANP,CAMeC,KAAD,IAAS;AACfC,IAAAA,OAAO,CAACD,KAAR,CAAc,0BAAd,EAA0CA,KAA1C;AACP,GARD;AASH,CAXM;AAaP;AACA;AACA;AACA;;AACA,OAAO,MAAME,0BAA0B,GAAIC,YAAD,IAAgB;AACtD3B,EAAAA,WAAW,CAACc,UAAZ,CAAuB,eAAvB,EAAwCG,GAAxC,CAA4CU,YAAY,CAACR,QAAb,GAAwB,GAAxB,GAA8BQ,YAAY,CAACP,SAAvF,EAAkGQ,GAAlG,CAAsG;AAClGT,IAAAA,QAAQ,EAAEQ,YAAY,CAACR,QAD2E;AAElGC,IAAAA,SAAS,EAAEO,YAAY,CAACP,SAF0E;AAGlGC,IAAAA,YAAY,EAAEM,YAAY,CAACN,YAHuE;AAIlGC,IAAAA,MAAM,EAAC;AAJ2F,GAAtG;AAMH,CAPM;AAUP;AACA;AACA;AACA;;AACA,OAAO,MAAMO,gBAAgB,GAAGF,YAAD,IAAgB;AAC3C3B,EAAAA,WAAW,CAACc,UAAZ,CAAuB,eAAvB,EAAwCgB,GAAxC,CAA4C;AACxCX,IAAAA,QAAQ,EAAEQ,YAAY,CAACR,QADiB;AAExCC,IAAAA,SAAS,EAAEO,YAAY,CAACP,SAFgB;AAGxCC,IAAAA,YAAY,EAAEM,YAAY,CAACN,YAHa;AAIxCC,IAAAA,MAAM,EAAC;AAJiC,GAA5C,EAMCjB,IAND,CAMO0B,MAAD,IAAY;AACd;AACAN,IAAAA,OAAO,CAACO,GAAR,CAAY,4BAAZ,EAA0CD,MAAM,CAACE,EAAjD;AACH,GATD,EAUCV,KAVD,CAUQC,KAAD,IAAW;AACdC,IAAAA,OAAO,CAACD,KAAR,CAAc,yBAAd,EAAyCA,KAAzC;AACH,GAZD;AAaH,CAdM","sourcesContent":["import axios from 'axios';\nimport { useState } from 'react';\nimport ShoppingItemModel from '../models/ShoppingItemModel';\n\nimport firebase from \"../utils/FirebaseConfig\";\n\nlet fireStoreDb = firebase.firestore();\n\n\n\nexport const getCityList =(setCityNameArr)=>{\n    axios.get('israel_city_list.json').then(response=>{\n        setCityNameArr(response.data.map((item)=>{\n            return item.hebrew_name;\n        }));\n    })\n}\n\nexport const getShoppingList= (updateShoppingList)=>{\n    const tempShoppingItems = [];\n    fireStoreDb.collection(\"shopping-list\").get().then( \n     (querySnapshot)=>{\n            querySnapshot.forEach(doc => {                \n                tempShoppingItems.push( new ShoppingItemModel(doc.data().itemName, doc.data().itemBrand , doc.data().itemQuantity , doc.data().inCart ));\n            });\n            updateShoppingList(tempShoppingItems);\n        }).catch( (error)=>{\n            console.error(\"Error getting document: \", error);\n    });\n}\n\n/**\n * Will create entry in firestore database with random id ID Scheme : ID = name + brand-name \n * @param {*} shoppingItem \n */\nexport const addShoppingItemToFireStore = (shoppingItem)=>{\n    fireStoreDb.collection(\"shopping-list\").doc(shoppingItem.itemName + \"_\" + shoppingItem.itemBrand).set({\n        itemName: shoppingItem.itemName,\n        itemBrand: shoppingItem.itemBrand,\n        itemQuantity: shoppingItem.itemQuantity,\n        inCart:false\n    });\n}\n\n\n/**\n * Will create entry in firestore database with random id\n * @param {*} shoppingItem \n */\nexport const saveShoppingItem= (shoppingItem)=>{\n    fireStoreDb.collection(\"shopping-list\").add({\n        itemName: shoppingItem.itemName,\n        itemBrand: shoppingItem.itemBrand,\n        itemQuantity: shoppingItem.itemQuantity,\n        inCart:false\n    })\n    .then((docRef) => {\n        //TODO: implement\n        console.log(\"Document written with ID: \", docRef.id);\n    })\n    .catch((error) => {\n        console.error(\"Error adding document: \", error);\n    });\n}"]},"metadata":{},"sourceType":"module"}