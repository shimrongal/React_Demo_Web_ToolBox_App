{"ast":null,"code":"var _jsxFileName = \"/Users/gal/Dev/AppleSeeds/FinalProject/toolbox_app/src/components/modals/ParkingAddressModal.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport { Button, Form, Modal } from \"react-bootstrap\";\nimport OptionComp from \"../OptionComp\";\nimport Geocode from \"react-geocode\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nGeocode.setApiKey(\"AIzaSyCNKfsXeTiMfS66RSVSMuYv5BEQVw5ohbI\");\nGeocode.setLanguage(\"heb\"); // Enable or disable logs. Its optional.\n\nGeocode.enableDebug();\n\nfunction ParkingAddressModal({\n  show,\n  onClose,\n  whatToShow,\n  setMapUrl,\n  cities,\n  parkingLocation,\n  mainBtnText,\n  setMainBtnText,\n  updateParkingLocation\n}) {\n  _s();\n\n  const [streetAddress, setStreetAddress] = useState(\"\");\n  const [cityName, setCity] = useState(\"\");\n  const [addressFromLatLng, setAddressFromLatLng] = useState(\"\");\n\n  const clearInputs = () => {\n    setStreetAddress(\"\");\n  };\n\n  const saveAddressAndClose = () => {\n    let address = streetAddress + \" \" + cityName;\n    console.log(address);\n\n    if (whatToShow === \"parkingLocation\") {\n      updateParkingLocation(address);\n      setMapUrl(`https://www.google.com/maps/embed/v1/place?key=AIzaSyCNKfsXeTiMfS66RSVSMuYv5BEQVw5ohbI&q=${address}`);\n      setMainBtnText(\"Get directions\");\n    } else if (whatToShow === \"currentLocation\") {\n      setMapUrl(`https://www.google.com/maps/embed/v1/directions?key=AIzaSyCNKfsXeTiMfS66RSVSMuYv5BEQVw5ohbI&origin=${parkingLocation}\"&destination=${address}&mode=walking`);\n    } else if (whatToShow === \"findParkingLot\") {\n      let x = axios.get(`https://maps.googleapis.com/maps/api/geocode/json?address=${address}&key=AIzaSyCNKfsXeTiMfS66RSVSMuYv5BEQVw5ohbI`).then(results => {\n        setMapUrl(`https://www.google.com/maps/embed/v1/search?key=AIzaSyCNKfsXeTiMfS66RSVSMuYv5BEQVw5ohbI&zoom=16&center=${results.data.results[0].geometry.location.lat},${results.data.results[0].geometry.location.lng}&q=parking near ${address}`);\n      }).catch(error => {\n        console.log(\"error https://maps.googleapis.com/maps/api/geocode/json?address= : \" + error);\n      });\n    }\n\n    clearInputs();\n    onClose();\n  };\n\n  const getOptionsList = cities.map((item, index) => /*#__PURE__*/_jsxDEV(OptionComp, {\n    item: item\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 56\n  }, this));\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    show: show,\n    onHide: onClose,\n    size: \"lg\",\n    children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n      closeButton: true,\n      children: /*#__PURE__*/_jsxDEV(Modal.Title, {\n        children: \"Parking Address\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 14\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n      children: /*#__PURE__*/_jsxDEV(Form, {\n        children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"Street Address\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            value: streetAddress,\n            onChange: e => setStreetAddress(e.target.value),\n            placeholder: \"Please insert parking spot street address\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"City Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            as: \"select\",\n            defaultValue: \"\\u05D1\\u05D7\\u05E8 \\u05E2\\u05D9\\u05E8\",\n            onChange: e => setCity(e.target.value),\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              children: \"\\u05D1\\u05D7\\u05E8 \\u05E2\\u05D9\\u05E8\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 62,\n              columnNumber: 25\n            }, this), getOptionsList]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Modal.Footer, {\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        variant: \"secondary\",\n        onClick: onClose,\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"primary\",\n        onClick: saveAddressAndClose,\n        children: \"Create New Address\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 12\n  }, this);\n}\n\n_s(ParkingAddressModal, \"GLGVfvcHUqce48tJ7Nf0HKyzMf4=\");\n\n_c = ParkingAddressModal;\nexport default ParkingAddressModal;\n\nvar _c;\n\n$RefreshReg$(_c, \"ParkingAddressModal\");","map":{"version":3,"sources":["/Users/gal/Dev/AppleSeeds/FinalProject/toolbox_app/src/components/modals/ParkingAddressModal.js"],"names":["useState","Button","Form","Modal","OptionComp","Geocode","axios","setApiKey","setLanguage","enableDebug","ParkingAddressModal","show","onClose","whatToShow","setMapUrl","cities","parkingLocation","mainBtnText","setMainBtnText","updateParkingLocation","streetAddress","setStreetAddress","cityName","setCity","addressFromLatLng","setAddressFromLatLng","clearInputs","saveAddressAndClose","address","console","log","x","get","then","results","data","geometry","location","lat","lng","catch","error","getOptionsList","map","item","index","e","target","value"],"mappings":"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","sourcesContent":["import { useState } from \"react\";\nimport { Button, Form, Modal } from \"react-bootstrap\";\nimport OptionComp from \"../OptionComp\";\nimport Geocode from \"react-geocode\";\nimport axios from \"axios\";\n\nGeocode.setApiKey(\"AIzaSyCNKfsXeTiMfS66RSVSMuYv5BEQVw5ohbI\");\nGeocode.setLanguage(\"heb\");\n\n// Enable or disable logs. Its optional.\nGeocode.enableDebug();\n\nfunction ParkingAddressModal({show,  onClose,whatToShow, setMapUrl, cities , parkingLocation ,mainBtnText, setMainBtnText  ,updateParkingLocation}) {\n    const [streetAddress, setStreetAddress] = useState(\"\");\n    const [cityName, setCity]= useState(\"\");\n    const [addressFromLatLng, setAddressFromLatLng] =useState(\"\");\n\n    const clearInputs = ()=>{\n        setStreetAddress(\"\");\n    }\n\n    const saveAddressAndClose= ()=>{\n        let address = streetAddress + \" \" +cityName;\n        console.log(address);\n        if (whatToShow === \"parkingLocation\"){\n            updateParkingLocation(address);\n            setMapUrl(`https://www.google.com/maps/embed/v1/place?key=AIzaSyCNKfsXeTiMfS66RSVSMuYv5BEQVw5ohbI&q=${address}`);\n            setMainBtnText(\"Get directions\");\n        }\n        else if (whatToShow === \"currentLocation\") {\n            setMapUrl(`https://www.google.com/maps/embed/v1/directions?key=AIzaSyCNKfsXeTiMfS66RSVSMuYv5BEQVw5ohbI&origin=${parkingLocation}\"&destination=${address}&mode=walking`);\n        }\n        else if (whatToShow === \"findParkingLot\"){\n            let x = axios.get(`https://maps.googleapis.com/maps/api/geocode/json?address=${address}&key=AIzaSyCNKfsXeTiMfS66RSVSMuYv5BEQVw5ohbI`).then((results)=>{\n                setMapUrl(`https://www.google.com/maps/embed/v1/search?key=AIzaSyCNKfsXeTiMfS66RSVSMuYv5BEQVw5ohbI&zoom=16&center=${results.data.results[0].geometry.location.lat},${results.data.results[0].geometry.location.lng}&q=parking near ${address}`);\n            }).catch((error)=>{\n                console.log(\"error https://maps.googleapis.com/maps/api/geocode/json?address= : \"+error);\n\n            });\n        \n        }\n        clearInputs()\n        onClose();\n    }\n\n    const getOptionsList = cities.map((item, index) => <OptionComp item={item} /> );\n    \n    return(<Modal show={show} onHide={onClose} size=\"lg\" >\n        <Modal.Header closeButton>\n             <Modal.Title>Parking Address</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n            <Form>\n                <Form.Group>\n                    <Form.Label>Street Address</Form.Label>\n                    <Form.Control value={streetAddress} onChange={(e)=>setStreetAddress(e.target.value)} placeholder=\"Please insert parking spot street address\"></Form.Control>\n                </Form.Group>\n                <Form.Group>\n                \n                    <Form.Label>City Name</Form.Label>\n                    <Form.Control as=\"select\" defaultValue=\"בחר עיר\" onChange={(e)=>setCity(e.target.value)}>\n                        <option>בחר עיר</option> \n                        {getOptionsList}\n                    </Form.Control>\n                  \n                </Form.Group>\n            </Form>\n        </Modal.Body>\n        <Modal.Footer>\n                <Button variant=\"secondary\" onClick={onClose}>\n                    Cancel\n                </Button>\n                <Button variant=\"primary\" onClick={saveAddressAndClose}>\n                    Create New Address\n                </Button>\n        </Modal.Footer>\n\n    </Modal>);\n}\n\nexport default ParkingAddressModal;"]},"metadata":{},"sourceType":"module"}