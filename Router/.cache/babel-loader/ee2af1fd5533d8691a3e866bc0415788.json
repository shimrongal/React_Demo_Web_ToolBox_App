{"ast":null,"code":"var _jsxFileName = \"/Users/gal/Dev/AppleSeeds/FinalProject/toolbox_app/src/components/modals/ParkingAddressModal.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport { Button, Form, Modal } from \"react-bootstrap\";\nimport OptionComp from \"../OptionComp\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ParkingAddressModal({\n  show,\n  onClose,\n  cities,\n  updateLocation,\n  setWhatToShow,\n  mainBtnText,\n  setMainBtnText\n}) {\n  _s();\n\n  const [streetAddress, setStreetAddress] = useState(\"\");\n  const [cityName, setCity] = useState(\"\");\n\n  const clearInputs = () => {\n    setStreetAddress(\"\");\n  };\n\n  const saveAddressAndClose = () => {\n    let address = streetAddress + \" \" + cityName;\n    console.log(address);\n    debugger;\n    updateLocation(address);\n\n    if (mainBtnText !== \"Get directions\") {\n      setWhatToShow(`https://www.google.com/maps/embed/v1/place?key=AIzaSyCNKfsXeTiMfS66RSVSMuYv5BEQVw5ohbI&q=${address}`);\n      setMainBtnText(\"Get directions\");\n    } else {\n      setWhatToShow(`https://www.google.com/maps/embed/v1/directions?key=AIzaSyCNKfsXeTiMfS66RSVSMuYv5BEQVw5ohbI&origin=\"הרצל 50 תל אביב\"&destination=${address}&mode=walking`);\n    }\n\n    clearInputs();\n    onClose();\n  };\n\n  const getOptionsList = cities.map((item, index) => /*#__PURE__*/_jsxDEV(OptionComp, {\n    item: item\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 56\n  }, this));\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    show: show,\n    onHide: onClose,\n    size: \"lg\",\n    children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n      closeButton: true,\n      children: /*#__PURE__*/_jsxDEV(Modal.Title, {\n        children: \"Parking Address\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 14\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n      children: /*#__PURE__*/_jsxDEV(Form, {\n        children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"Street Address\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 38,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            value: streetAddress,\n            onChange: e => setStreetAddress(e.target.value),\n            placeholder: \"Please insert parking spot street address\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 39,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"City Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            as: \"select\",\n            defaultValue: \"\\u05D1\\u05D7\\u05E8 \\u05E2\\u05D9\\u05E8\",\n            onChange: e => setCity(e.target.value),\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              children: \"\\u05D1\\u05D7\\u05E8 \\u05E2\\u05D9\\u05E8\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 45,\n              columnNumber: 25\n            }, this), getOptionsList]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Modal.Footer, {\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        variant: \"secondary\",\n        onClick: onClose,\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"primary\",\n        onClick: saveAddressAndClose,\n        children: \"Create New Address\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 12\n  }, this);\n}\n\n_s(ParkingAddressModal, \"3wpau/rvUNNMsGhzmt49AaUdlUw=\");\n\n_c = ParkingAddressModal;\nexport default ParkingAddressModal;\n\nvar _c;\n\n$RefreshReg$(_c, \"ParkingAddressModal\");","map":{"version":3,"sources":["/Users/gal/Dev/AppleSeeds/FinalProject/toolbox_app/src/components/modals/ParkingAddressModal.js"],"names":["useState","Button","Form","Modal","OptionComp","ParkingAddressModal","show","onClose","cities","updateLocation","setWhatToShow","mainBtnText","setMainBtnText","streetAddress","setStreetAddress","cityName","setCity","clearInputs","saveAddressAndClose","address","console","log","getOptionsList","map","item","index","e","target","value"],"mappings":"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","sourcesContent":["import { useState } from \"react\";\nimport { Button, Form, Modal } from \"react-bootstrap\";\nimport OptionComp from \"../OptionComp\";\n\nfunction ParkingAddressModal({show,  onClose, cities ,updateLocation ,setWhatToShow,mainBtnText, setMainBtnText}) {\n    const [streetAddress, setStreetAddress] = useState(\"\");\n    const [cityName, setCity]= useState(\"\");\n\n    const clearInputs = ()=>{\n        setStreetAddress(\"\");\n    }\n\n    const saveAddressAndClose= ()=>{\n        let address = streetAddress + \" \" +cityName;\n        console.log(address);\n        debugger\n        updateLocation(address);\n        if (mainBtnText !== \"Get directions\"){\n            setWhatToShow(`https://www.google.com/maps/embed/v1/place?key=AIzaSyCNKfsXeTiMfS66RSVSMuYv5BEQVw5ohbI&q=${address}`);\n            setMainBtnText(\"Get directions\");\n        }\n        else {\n            setWhatToShow(`https://www.google.com/maps/embed/v1/directions?key=AIzaSyCNKfsXeTiMfS66RSVSMuYv5BEQVw5ohbI&origin=\"הרצל 50 תל אביב\"&destination=${address}&mode=walking`);\n        }\n        clearInputs()\n        onClose();\n    }\n\n    const getOptionsList = cities.map((item, index) => <OptionComp item={item} /> );\n    \n    return(<Modal show={show} onHide={onClose} size=\"lg\" >\n        <Modal.Header closeButton>\n             <Modal.Title>Parking Address</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n            <Form>\n                <Form.Group>\n                    <Form.Label>Street Address</Form.Label>\n                    <Form.Control value={streetAddress} onChange={(e)=>setStreetAddress(e.target.value)} placeholder=\"Please insert parking spot street address\"></Form.Control>\n                </Form.Group>\n                <Form.Group>\n                \n                    <Form.Label>City Name</Form.Label>\n                    <Form.Control as=\"select\" defaultValue=\"בחר עיר\" onChange={(e)=>setCity(e.target.value)}>\n                        <option>בחר עיר</option> \n                        {getOptionsList}\n                    </Form.Control>\n                  \n                </Form.Group>\n            </Form>\n        </Modal.Body>\n        <Modal.Footer>\n                <Button variant=\"secondary\" onClick={onClose}>\n                    Cancel\n                </Button>\n                <Button variant=\"primary\" onClick={saveAddressAndClose}>\n                    Create New Address\n                </Button>\n        </Modal.Footer>\n\n    </Modal>);\n}\n\nexport default ParkingAddressModal;"]},"metadata":{},"sourceType":"module"}