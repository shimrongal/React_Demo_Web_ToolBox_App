{"ast":null,"code":"import axios from \"axios\";\nexport const getCurrentLocation = (updateParkingLatLng, updateShowParkingAddressModal, tempWhatToShow, setMapUrl, setWhatToShow, parkingLatLng, setMainBtnText) => {\n  function success(position) {\n    const latitude = position.coords.latitude;\n    const longitude = position.coords.longitude;\n    updateParkingLatLng({\n      lat: latitude,\n      lng: longitude\n    });\n\n    if (tempWhatToShow === \"parkingLocation\") {\n      setMapUrl(`https://www.google.com/maps/embed/v1/place?key=AIzaSyCNKfsXeTiMfS66RSVSMuYv5BEQVw5ohbI&q=${latitude},${longitude}`);\n      setMainBtnText(\"Get directions\");\n    } else if (tempWhatToShow === \"currentLocation\") {\n      setMapUrl(`https://www.google.com/maps/embed/v1/directions?key=AIzaSyCNKfsXeTiMfS66RSVSMuYv5BEQVw5ohbI&origin=${latitude},${longitude}&destination=${parkingLatLng.lat},${parkingLatLng.lng}&mode=walking`);\n    } else if (tempWhatToShow === \"findParkingLot\") {\n      // Get address from latitude & longitude.\n      axios.get(`https://maps.googleapis.com/maps/api/geocode/json?latlng=${latitude},${longitude}&key=AIzaSyCNKfsXeTiMfS66RSVSMuYv5BEQVw5ohbI`).then(results => {\n        console.log(results);\n        setMapUrl(`https://www.google.com/maps/embed/v1/search?key=AIzaSyCNKfsXeTiMfS66RSVSMuYv5BEQVw5ohbI&zoom=16&center=${results.data.results[0].geometry.location.lat},${results.data.results[0].geometry.location.lng}&q=parking near ${results.data.results[0].formatted_address}`);\n      }).catch(error => {\n        console.log(\"error https://maps.googleapis.com/maps/api/geocode/json?address= : \" + error);\n      });\n    }\n  }\n\n  function error() {\n    alert('Unable to retrieve your location');\n    updateShowParkingAddressModal(true);\n    setWhatToShow(tempWhatToShow);\n  }\n\n  if (!navigator.geolocation) {\n    alert('Geolocation is not supported by your browser');\n  } else {\n    navigator.geolocation.getCurrentPosition(success, error);\n  }\n};","map":{"version":3,"sources":["/Users/gal/Dev/AppleSeeds/FinalProject/toolbox_app/src/utils/LocationManager.js"],"names":["axios","getCurrentLocation","updateParkingLatLng","updateShowParkingAddressModal","tempWhatToShow","setMapUrl","setWhatToShow","parkingLatLng","setMainBtnText","success","position","latitude","coords","longitude","lat","lng","get","then","results","console","log","data","geometry","location","formatted_address","catch","error","alert","navigator","geolocation","getCurrentPosition"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAGA,OAAO,MAAMC,kBAAkB,GAAG,CAACC,mBAAD,EAAuBC,6BAAvB,EAAsDC,cAAtD,EAAsEC,SAAtE,EAAiFC,aAAjF,EAAgGC,aAAhG,EAAgHC,cAAhH,KAAiI;AAC/J,WAASC,OAAT,CAAiBC,QAAjB,EAA2B;AACvB,UAAMC,QAAQ,GAAID,QAAQ,CAACE,MAAT,CAAgBD,QAAlC;AACA,UAAME,SAAS,GAAGH,QAAQ,CAACE,MAAT,CAAgBC,SAAlC;AACAX,IAAAA,mBAAmB,CAAE;AAAEY,MAAAA,GAAG,EAACH,QAAN;AAAgBI,MAAAA,GAAG,EAACF;AAApB,KAAF,CAAnB;;AACA,QAAIT,cAAc,KAAK,iBAAvB,EAAyC;AACrCC,MAAAA,SAAS,CAAE,4FAA2FM,QAAS,IAAGE,SAAU,EAAnH,CAAT;AACAL,MAAAA,cAAc,CAAC,gBAAD,CAAd;AACH,KAHD,MAIK,IAAIJ,cAAc,KAAK,iBAAvB,EAAyC;AAC1CC,MAAAA,SAAS,CAAE,sGAAqGM,QAAS,IAAGE,SAAU,gBAAeN,aAAa,CAACO,GAAI,IAAGP,aAAa,CAACQ,GAAI,eAAnL,CAAT;AACH,KAFI,MAGA,IAAIX,cAAc,KAAK,gBAAvB,EAAwC;AACzC;AACAJ,MAAAA,KAAK,CAACgB,GAAN,CAAW,4DAA2DL,QAAS,IAAGE,SAAU,8CAA5F,EAA2II,IAA3I,CAAiJC,OAAD,IAAW;AACvJC,QAAAA,OAAO,CAACC,GAAR,CAAYF,OAAZ;AACAb,QAAAA,SAAS,CAAE,0GAAyGa,OAAO,CAACG,IAAR,CAAaH,OAAb,CAAqB,CAArB,EAAwBI,QAAxB,CAAiCC,QAAjC,CAA0CT,GAAI,IAAGI,OAAO,CAACG,IAAR,CAAaH,OAAb,CAAqB,CAArB,EAAwBI,QAAxB,CAAiCC,QAAjC,CAA0CR,GAAI,mBAAkBG,OAAO,CAACG,IAAR,CAAaH,OAAb,CAAqB,CAArB,EAAwBM,iBAAkB,EAAtQ,CAAT;AACH,OAHD,EAGGC,KAHH,CAGUC,KAAD,IAAS;AACdP,QAAAA,OAAO,CAACC,GAAR,CAAY,wEAAsEM,KAAlF;AACH,OALD;AAMH;AACJ;;AAED,WAASA,KAAT,GAAiB;AACbC,IAAAA,KAAK,CAAC,kCAAD,CAAL;AACAxB,IAAAA,6BAA6B,CAAC,IAAD,CAA7B;AACAG,IAAAA,aAAa,CAACF,cAAD,CAAb;AAEH;;AAED,MAAG,CAACwB,SAAS,CAACC,WAAd,EAA2B;AACvBF,IAAAA,KAAK,CAAC,8CAAD,CAAL;AACC,GAFL,MAEW;AACPC,IAAAA,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,CAAyCrB,OAAzC,EAAkDiB,KAAlD;AACH;AACJ,CAnCM","sourcesContent":["import axios from \"axios\";\n\n\nexport const getCurrentLocation = (updateParkingLatLng , updateShowParkingAddressModal, tempWhatToShow, setMapUrl ,setWhatToShow, parkingLatLng , setMainBtnText)=>{\n    function success(position) {\n        const latitude  = position.coords.latitude;\n        const longitude = position.coords.longitude;\n        updateParkingLatLng( { lat:latitude, lng:longitude} );\n        if (tempWhatToShow === \"parkingLocation\"){\n            setMapUrl(`https://www.google.com/maps/embed/v1/place?key=AIzaSyCNKfsXeTiMfS66RSVSMuYv5BEQVw5ohbI&q=${latitude},${longitude}`);\n            setMainBtnText(\"Get directions\");\n        }\n        else if (tempWhatToShow === \"currentLocation\"){\n            setMapUrl(`https://www.google.com/maps/embed/v1/directions?key=AIzaSyCNKfsXeTiMfS66RSVSMuYv5BEQVw5ohbI&origin=${latitude},${longitude}&destination=${parkingLatLng.lat},${parkingLatLng.lng}&mode=walking`);\n        }\n        else if (tempWhatToShow === \"findParkingLot\"){\n            // Get address from latitude & longitude.\n            axios.get(`https://maps.googleapis.com/maps/api/geocode/json?latlng=${latitude},${longitude}&key=AIzaSyCNKfsXeTiMfS66RSVSMuYv5BEQVw5ohbI`).then((results)=>{\n                console.log(results);\n                setMapUrl(`https://www.google.com/maps/embed/v1/search?key=AIzaSyCNKfsXeTiMfS66RSVSMuYv5BEQVw5ohbI&zoom=16&center=${results.data.results[0].geometry.location.lat},${results.data.results[0].geometry.location.lng}&q=parking near ${results.data.results[0].formatted_address}`);\n            }).catch((error)=>{\n                console.log(\"error https://maps.googleapis.com/maps/api/geocode/json?address= : \"+error);\n            });\n        }\n    }\n\n    function error() {\n        alert('Unable to retrieve your location');\n        updateShowParkingAddressModal(true);        \n        setWhatToShow(tempWhatToShow);\n    \n    }\n    \n    if(!navigator.geolocation) {\n        alert('Geolocation is not supported by your browser');\n        } else {\n        navigator.geolocation.getCurrentPosition(success, error);\n    }\n}\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}